# This is a basic workflow to help you get started with Actions

name: CI

# Controls when the action will run. 
on:
  # Triggers the workflow on push or pull request events but only for the master branch
  push:
  pull_request:
    branches: [ master ]

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}-builder

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  # This workflow contains a single job called "build"
  publish-repo:
    # The type of runner that the job will run on
    runs-on: ubuntu-latest
    # allow access to github docker registry
    permissions:
      contents: read
      packages: write

    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
      - name: Install git LFS extention
        run: |
          curl -fsSL https://github.com/git-lfs/git-lfs/releases/download/v2.13.3/git-lfs-linux-amd64-v2.13.3.tar.gz -o
          mkdir git-lfs
          cd git-lfs
          tar -xvzf ../git-lfs-linux-amd64-v2.13.3.tar.gz
          sudo ./install.sh
          git lfs install

      - name: Checkout
        uses: actions/checkout@v2

      - name: Set short sha
        id: shortsha
        run: echo "::set-output name=sha_short::${GITHUB_SHA::7}"

      - name: Set uid:gid
        id: uidgid
        run: |
          echo "::set-output name=uid::$(id -u)"
          echo "::set-output name=gid::$(id -g)"
          echo "::set-output name=uid_gid::$(id -u):$(id -g)"

      - name: Current uid:gid
        run: echo ${{ steps.uidgid.outputs.uid_gid }}

      #- name: Set up QEMU
      #  uses: docker/setup-qemu-action@v1

      # - name: Set up Docker Buildx
      #   uses: docker/setup-buildx-action@v1

      # - name: Cache Docker layers
      #   uses: actions/cache@v2
      #   with:
      #     path: /tmp/.buildx-cache
      #     key: ${{ runner.os }}-buildx-${{ github.sha }}
      #     restore-keys: |
      #       ${{ runner.os }}-buildx-

      # - name: Log in to the Container registry
      #   uses: docker/login-action@v1
      #   with:
      #     registry: ${{ env.REGISTRY }}
      #     username: ${{ github.actor }}
      #     password: ${{ secrets.GITHUB_TOKEN }}

      # - name: Extract metadata (tags, labels) for Docker
      #   id: meta
      #   uses: docker/metadata-action@v3
      #   with:
      #     images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
      #     # generate Docker tags based on the following events/attributes
      #     tags: |
      #       type=ref,event=branch
      #       type=semver,pattern={{version}},enable=${{ startsWith(github.ref, 'refs/tags/v') }}
      #       type=semver,pattern={{major}}.{{minor}},enable=${{ startsWith(github.ref, 'refs/tags/v') }}
      #       type=semver,pattern={{major}},enable=${{ startsWith(github.ref, 'refs/tags/v') }}
      #       type=sha
      #     labels: |
      #       org.opencontainers.image.ref.name=${{ github.ref }}

      # - name: Build and push Docker image
      #   uses: docker/build-push-action@v2
      #   with:
      #     context: ./.devcontainer
      #     push: true
      #     tags: ${{ steps.meta.outputs.tags }}
      #     labels: ${{ steps.meta.outputs.labels }}
      #     cache-from: type=local,src=/tmp/.buildx-cache
      #     cache-to: type=local,dest=/tmp/.buildx-cache-new

      # # add qemu just in case
      # - name: Set up QEMU
      #   uses: docker/setup-qemu-action@v1

      - name: Import PGP keys for the repo
        env:
          APT_REPO_PGP_PRIV: ${{ secrets.APT_REPO_PGP_PRIV }}
        run: |
          echo importing pgp key
          (cat archive.key && printf '%s' "${APT_REPO_PGP_PRIV}") | gpg --allow-secret-key-import --import --no-tty --batch --yes
          gpg --list-secret-key --with-subkey-fingerprint

      - name: Install needed packages
        env:
          DEBIAN_FRONTEND: noninteractive
        run: |
          sudo apt-get update && sudo -E apt-get -o Dpkg::Options::="--force-confold" install -y reprepro

      # TODO: sign debs
      - name: sign debs not yet signed
        run: |
          echo place holder

      - name: generate the repository data
        run: |
          cat fido2luks_0.2.16_arm64.deb
          find . -path ./REPOSITORY.PATH -prune -o -type f -name '*.deb' -print0 | xargs -n 1 -0 ./add_deb_to_repo.sh

      - name: Publish Github pages
        uses: rayluo/github-pages-overwriter@v1.2
        with:
          source-directory: REPOSITORY.PATH

      # Temp fix
      # https://github.com/docker/build-push-action/issues/252
      # https://github.com/moby/buildkit/issues/1896
      #- name: Move cache
      #  run: |
      #    rm -rf /tmp/.buildx-cache
      #    mv /tmp/.buildx-cache-new /tmp/.buildx-cache
